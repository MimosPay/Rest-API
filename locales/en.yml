---
en:
  intro: "Introduce"
  title: "MimosPay API Reference"
  description: "The Mimos Commerce provides a simple and powerful REST API to integrate crypto-currency payments into your business or application. This API reference provides information on available endpoints and how to interact with them."
  swith_lang: "切换至"
  base_url: "Base URL"
  notic: "Note"
  your_api_key: "your API Key"
  setting: "Settings"
  rules: "Rules"
  no_auth_required: "This operation does not require authentication"
  auth_required_key: "This operation must be authenticated with an API key"
  http_request: "HTTP Request"
  http_request_params: "Request Parameters"
  http_request_headers: "Request Headers"
  http_request_body: "Request Body"
  http_response: "HTTP Responses"
  guide:
    title: "Guides"
    accept_payments: "Accept payments via MimosPay"
    note: "To accept payments via MimosPay, a token will need to be sent with the API request. And the API request will be requiring cryptographically signing before sent."
    get_api_key : "Getting API Key"
    get_api_key_note : "You can generate a token directly from the <code>Settings -> API Keys</code> page."
    get_api_key_step1: "Click <code>Add API Key</code>"
    get_api_key_step2: "Fill the form parameters"
    get_api_key_step3: "Click Button <code>Generate API KEY</code>"
    get_api_key_step4: "Save your API Key and API Secret either click the <code>Copy API KEY</code> or copy them manually"
    get_api_key_step2_label: "Label, (e.g. My MimosPay Client)"
    get_api_key_step2_succ_url: "Success Redirect URL"
    get_api_key_step2_fail_url: "Failure Redirect URL"
    get_api_key_step2_cb_url: "Webhook URL, to receive the events which push by MimosPay"
    api_key_note: "It is used in API request"
    api_secrect_note: "It is used to generate the signature (and only visible once after creation)"
    signing_request: "Signing request"
    signing_request_step1: "Prepare the request headers and body"
    signing_request_step2: "Sort the params by the non-empty key's ASCII in the ascending order and concatenate into <code>stringA</code> with URL key-value format(i.e. key1=value1&key2=value2…)"
    signing_request_step3: "Append the API Secrect to <code>stringA</code> with param name <code>key</code> as <code>stringB</code>"
    signing_request_step4: "Use MD5 encode <code>stringB</code> and convert all characters to uppercasee to get the <code>signatureVal</code>"
    signing_request_step1_ts: "the UTC timestamp when API request, the unit is millisecond. The client timestamp included with the request must be within 5 minutes of the MimosPay system time when the request is received. If not, the request will fail with the <code>Invalid X-MM-TIMESTAMP</code> error"
    signing_request_step1_nonce: "an unique string to enforce idempotence for POST requests."
    signing_request_step1_payload: "request payload"
    signing_request_step2_note: "Pay attention to below rules:"
    signing_request_step2_rule1: "Sort the params name in the ASCII ascending order"
    signing_request_step2_rule2: "The param with empty value is ignored"
    signing_request_step2_rule3: "The param name are case sensitive"
    signing_request_step2_rule4: "If the value is object, stringify the object to a JSON string."
    making_request: "Making request"
    making_request_note: "For more details, please refer to "
    receiving_events: "Receiving events"
    receiving_events_note: "You can receive the event if adding a webhook subscription in <a href='https://mimos.io/commerce/en/settings'>Settings</a>."
    receiving_events_webhook_note: "Every MimosPay webhook request includes headers,"
    receiving_events_webhook_signature: "MD5 signature of the request body <code>data</code> field, computed using your webhook shared secret of the API Key"
    receiving_events_webhook_note2: "Always make sure that you verify the webhook signature before acting on it inside your system."
    receiving_events_webhook_signature_content: "The signature content,"
    receiving_events_webhook_in_payload: "in request payload"
    receiving_events_webhook_rule: "And signing the content by follow the"
  charge:
    title: "Charges"
    create_a_charge: "Create a charge"
    create_a_charge_note: "To get paid in cryptocurrency, you need to create a charge object."
    upadte_a_charge: "Update a charge"
    upadte_a_charge_note1: "Once a charge is created and the charge order has required information then the customer must choose the payment method and fill the email address to continue order."
    upadte_a_charge_note2: "And Mimos will provide the user with a cryptocurrency address to which they must send cryptocurrency."
    upadte_a_charge_note3: "Customer must broadcast a payment to the blockchain before the charge expires."
    show_a_charge: "Show a charge"
    show_a_charge_note: "Retrieves the details of a charge that has been previously created. Supply the unique charge indentifier that was returned when the charge was created. This information is also returned when a charge is first created."
  webhook:
    note: "Webhooks make it easier to integrate with MimosPay by allowing you to subscribe to a set of charge events. You can subscribe to the events by going to your settings page and adding a new webhook subscription under your API Key."
    verify_request: "Verify the webhook request includes an <code>X-MM-SIGNATURE</code> header, computed using your webhook shared secret as the key,"
    verify_request_step1: "Prepare the signature content"
    verify_request_payload: " in request payload"
  currency:
    title: "Currencies"
    fiat_title: "Fiat Currencies"
    crypto_title: "Crypto Currencies"
    note: "This are the currencies associated with the price field."
    fiat_note: "The full list of currencies defined in <a href='https://en.wikipedia.org/wiki/ISO_4217'>ISO 4217</a> presently available in the latest-updated."
  error:
    title: "Errors"
    note: "The MimosPay API uses the following error codes:"
  resource:
    title: "Resources"
    number_note1: "<code>Number</code> will represent as string in MimosPay."
    number_note2: "Since some libraries and languages don't deserialize the JSON,"
    number_note2_rule1: "numeric fields with high precision"
    number_note2_rule2: "numbers beyond "
  field:
    utc_time_in_millis: "The UTC timestamp in millisecond"
    data_valid_in_5_min: "must be within 5 minutes"
    nonce: "An unique string, in order to prevent duplicate submission"
    signature: "The signature of request content"
    external_order_id: "The order id of the merchant's own system"
    sku_name: "The product/order name"
    sku_local_price: "Price in local fiat currency"
    sku_local_currency: "Local fiat currency, see "
    supported_fiat_currencies: "Supported Fiat Currencies"
    supported_crypto_currencies: "Supported Crypto Currencies"
    metadata: "The stringify of JSON value by merchant defined."
    metadata_note: "MimosPay supported fields:"
    metadata_url: "the image will display on the customer page if the URL start with <code>http(s)</code> and end with <code>jpg&#124;gif&#124;png&#124;jpeg&#124;svg</code>"
    order_identifier: "The charge order identifier"
    payment_method_list_in: "Payment method which is listed in "
    bill_address: "Customer email address to receive payment or refund notifications"
    customer_name: "Customer name"
    show_details: "Show details or not, default as true/yes"
    override_success_redirect_url: "Override the redirect URL for the successful payment"
    override_failure_redirect_url: "Override the redirect URL for the unsuccessful payment"
    override_webhook_url: "Override the webhook URL"
